// <auto-generated />
using System;
using Infrastructure.Persistence.Writes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230507100835_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("bomrevisionseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("productseq")
                .IncrementsBy(10);

            modelBuilder.Entity("Domain.SupplyChainManagement.MaterialAggregate.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("MaterialTypeId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("RegionalMarketId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("RegionalMarketId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Domain.SupplyChainManagement.MaterialAggregate.MaterialCostManagement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionalPartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("TransactionalPartnerId");

                    b.ToTable("MaterialCostManagement");
                });

            modelBuilder.Entity("Domain.SupplyChainManagement.MaterialAggregate.MaterialType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MaterialType");
                });

            modelBuilder.Entity("Domain.SupplyChainManagement.MaterialAggregate.RegionalMarket", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RegionalMarket");
                });

            modelBuilder.Entity("Domain.SupplyChainManagement.TransactionalPartnerAggregate.CurrencyType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CurrencyType");
                });

            modelBuilder.Entity("Domain.SupplyChainManagement.TransactionalPartnerAggregate.LocationType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("LocationType");
                });

            modelBuilder.Entity("Domain.SupplyChainManagement.TransactionalPartnerAggregate.TransactionalPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("CurrencyTypeId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("LocationTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("TransactionalPartnerTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("TransactionalPartnerTypeId");

                    b.ToTable("TransactionalPartners");
                });

            modelBuilder.Entity("Domain.SupplyChainManagement.TransactionalPartnerAggregate.TransactionalPartnerType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TransactionalPartnerType");
                });

            modelBuilder.Entity("Domain.ProductionPlanning.BoM", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("char(10)");

                    b.HasKey("Id");

                    b.ToTable("BoM");
                });

            modelBuilder.Entity("Domain.ProductionPlanning.BoMRevision", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<short>("Id"), "bomrevisionseq");

                    b.Property<long?>("BoMId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("char(14)");

                    b.Property<string>("Confirmation")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("BoMId");

                    b.ToTable("BoMRevision");
                });

            modelBuilder.Entity("Domain.ProductionPlanning.BoMRevisionMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("BoMRevisionId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TransactionalPartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Unit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BoMRevisionId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("TransactionalPartnerId");

                    b.ToTable("BoMRevisionMaterial");
                });

            modelBuilder.Entity("Domain.ProductionPlanning.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "productseq");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.SupplyChainManagement.MaterialAggregate.Material", b =>
                {
                    b.HasOne("Domain.SupplyChainManagement.MaterialAggregate.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.SupplyChainManagement.MaterialAggregate.RegionalMarket", "RegionalMarket")
                        .WithMany()
                        .HasForeignKey("RegionalMarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.SupplyChainManagement.MaterialAggregate.MaterialAttributes", "Attributes", b1 =>
                        {
                            b1.Property<Guid>("MaterialId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CodeUnique")
                                .IsRequired()
                                .HasColumnType("varchar(2000)")
                                .HasColumnName("CodeUnique");

                            b1.Property<string>("ColorCode")
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("ColorCode");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("Name");

                            b1.Property<string>("Unit")
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Unit");

                            b1.Property<string>("Varian")
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Varian");

                            b1.Property<string>("Weight")
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Weight");

                            b1.Property<string>("Width")
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Width");

                            b1.HasKey("MaterialId");

                            b1.ToTable("Materials");

                            b1.WithOwner()
                                .HasForeignKey("MaterialId");
                        });

                    b.Navigation("Attributes")
                        .IsRequired();

                    b.Navigation("MaterialType");

                    b.Navigation("RegionalMarket");
                });

            modelBuilder.Entity("Domain.SupplyChainManagement.MaterialAggregate.MaterialCostManagement", b =>
                {
                    b.HasOne("Domain.SupplyChainManagement.MaterialAggregate.Material", null)
                        .WithMany("MaterialCostManagements")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.SupplyChainManagement.TransactionalPartnerAggregate.TransactionalPartner", "TransactionalPartner")
                        .WithMany()
                        .HasForeignKey("TransactionalPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.SupplyChainManagement.MaterialAggregate.MinPurchaseMaterialRequirement", "MinPurchaseMaterialRequirement", b1 =>
                        {
                            b1.Property<Guid>("MaterialCostManagementId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MinQuantity")
                                .HasColumnType("int")
                                .HasColumnName("MinQuantity");

                            b1.Property<decimal>("Price")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price");

                            b1.Property<decimal>("Surcharge")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Surcharge");

                            b1.HasKey("MaterialCostManagementId");

                            b1.ToTable("MaterialCostManagement");

                            b1.WithOwner()
                                .HasForeignKey("MaterialCostManagementId");
                        });

                    b.Navigation("MinPurchaseMaterialRequirement")
                        .IsRequired();

                    b.Navigation("TransactionalPartner");
                });

            modelBuilder.Entity("Domain.SupplyChainManagement.TransactionalPartnerAggregate.TransactionalPartner", b =>
                {
                    b.HasOne("Domain.SupplyChainManagement.TransactionalPartnerAggregate.CurrencyType", "CurrencyType")
                        .WithMany()
                        .HasForeignKey("CurrencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.SupplyChainManagement.TransactionalPartnerAggregate.LocationType", "LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.SupplyChainManagement.TransactionalPartnerAggregate.TransactionalPartnerType", "TransactionalPartnerType")
                        .WithMany()
                        .HasForeignKey("TransactionalPartnerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.SupplyChainManagement.TransactionalPartnerAggregate.ContactInformation", "ContactInformation", b1 =>
                        {
                            b1.Property<Guid>("TransactionalPartnerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Address");

                            b1.Property<string>("ContactPersonName")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("ContactPersonName");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Email");

                            b1.Property<string>("TaxNo")
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("TaxNo");

                            b1.Property<string>("TelNo")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("TelNo");

                            b1.Property<string>("Website")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Website");

                            b1.HasKey("TransactionalPartnerId");

                            b1.ToTable("TransactionalPartners");

                            b1.WithOwner()
                                .HasForeignKey("TransactionalPartnerId");
                        });

                    b.Navigation("ContactInformation")
                        .IsRequired();

                    b.Navigation("CurrencyType");

                    b.Navigation("LocationType");

                    b.Navigation("TransactionalPartnerType");
                });

            modelBuilder.Entity("Domain.ProductionPlanning.BoM", b =>
                {
                    b.HasOne("Domain.ProductionPlanning.Product", null)
                        .WithOne("BoM")
                        .HasForeignKey("Domain.ProductionPlanning.BoM", "Id");
                });

            modelBuilder.Entity("Domain.ProductionPlanning.BoMRevision", b =>
                {
                    b.HasOne("Domain.ProductionPlanning.BoM", null)
                        .WithMany("BomRevisions")
                        .HasForeignKey("BoMId");
                });

            modelBuilder.Entity("Domain.ProductionPlanning.BoMRevisionMaterial", b =>
                {
                    b.HasOne("Domain.ProductionPlanning.BoMRevision", null)
                        .WithMany("BoMRevisionMaterials")
                        .HasForeignKey("BoMRevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.SupplyChainManagement.MaterialAggregate.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.SupplyChainManagement.TransactionalPartnerAggregate.TransactionalPartner", "TransactionalPartner")
                        .WithMany()
                        .HasForeignKey("TransactionalPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("TransactionalPartner");
                });

            modelBuilder.Entity("Domain.SupplyChainManagement.MaterialAggregate.Material", b =>
                {
                    b.Navigation("MaterialCostManagements");
                });

            modelBuilder.Entity("Domain.ProductionPlanning.BoM", b =>
                {
                    b.Navigation("BomRevisions");
                });

            modelBuilder.Entity("Domain.ProductionPlanning.BoMRevision", b =>
                {
                    b.Navigation("BoMRevisionMaterials");
                });

            modelBuilder.Entity("Domain.ProductionPlanning.Product", b =>
                {
                    b.Navigation("BoM");
                });
#pragma warning restore 612, 618
        }
    }
}
